# -*- coding: utf-8 -*-
"""lab 4_ 207ct27605.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yQ1YrYuWMpk07A1ok0Oz51_j6jbGRIRE

<a href="https://colab.research.google.com/github/NgaanLee/DataAnalystDeepLearning/blob/main/Homeworks_Lap04.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

# Bài tập

*Dữ liệu mô tả:* Vụ đắm tàu ​​Titanic là một trong những vụ đắm tàu ​​khét tiếng nhất trong lịch sử. Vào ngày 15 tháng 4 năm 1912, trong chuyến đi đầu tiên của mình, tàu Titanic ―unsinkable‖ RMS được nhiều người coi là đã chìm sau khi va chạm với một tảng băng trôi. Thật không may, không có đủ thuyền cứu sinh cho tất cả mọi người trên tàu, dẫn đến cái chết của 1502 trong số 2224 hành khách và phi hành đoàn. Mặc dù có một số yếu tố may mắn liên quan đến việc sống sót, nhưng có vẻ như một số nhóm người có khả năng sống sót cao hơn những nhóm khác.

##PHẦN 1: DATA CLEANSING & FEATURE ENGINEERING

1. Viết hàm load_data() để tải dữ liệu lên ứng dụng.Sau đó, hiển thị ra màn hình 10 dòng đầu tiên.
2. Thống kê dữ liệu thiếu trên các biến số và trực quan hóa dữ liệu thiếu bằng biểu đồ (Heat map). Hãy cho nhận xét về tình trạng thiếu dữ liệu Age, Cabin và Embarked
3. Xử lý tên cột tên Name, tách ra làm 2 cột: firstName và secondName.
**Lưu ý:** Sau khi tách cột xong thì xóa luôn cột Name

4. Xứ lý rút gọn kích thước dữ liệu trên cột Sex như sau: thay thế male  M và female  F
5. Xử lý dữ liệu thiếu trên biến Age bằng cách thay thế bằng giá trị trung bình tuổi: Hãy đưa ra quyết định dùng giá trị trung bình tuổi toàn bộ hành khách hay theo từng nhóm hạng vé (hạng hành khách: Pclass). Ta tiến hành làm các bước sau
- Sử dụng Seaborn để vẽ biểu đồ (Box plot) trực quan dữ liệu để xác định phân phối tuổi trên từng hạng hành khách. Nhận xét về tuổi trung bình giữa các nhóm hành khách. Từ đó đưa ra quyết định cách thay thế giá trị tuổi bị thiếu. b. Tiến hành thay thế giá trị Age bị thiếu. Sau đó, hiển thị kết quả dạng bảng và trực quan dữ liệu đã xử lý thiếu cho cột‘Age‘ bằng biểu đồ Heat map.
- Sau đó, hiển thị kết quả dạng bảng và trực quan dữ liệu đã xử lý thiếu cho cột‘Age‘ bằng biểu đồ Heat map.
6. Xây dựng biến số Agegroup có thang đo thứ tự được ánh xạ theo thang đo khoảng dựa trên độ tuổi của hành khách như sau: (age =< 12]  Kid; (12, 18]: Teen, (18, 60]: Adult và ( age > 60): Older
7.  Tiến hành thêm đặc trưng về danh xưng (namePrefix) trong xã hội bằng cách tách Mr, Mrs, Miss, Master ra khỏi ―secondName
Khai thác thêm thông tin số lượng thành viên đi theo nhóm thân quen (familySize) đối với mỗi hành khách trên chuyến hải trình; family size = 1+ SibSp + Parch
8. Tạo thêm đặc trưng ‗Alone‘ để xác định hành khách đi theo nhóm hay cá nhân bằng cách dựa trên familySize như sau: Nếu familySize = 0 thì giá trị Alone = 1 và ngược lại là 0.
9. Tiến hành tách loại cabin (typeCabin) mà hành khách ở để lọc và phân tích đặc tính cabin. Loại cabin được kí hiệu bởi chữ cái đầu tiên. Lưu ý: Đối với dữ liệu cabin bị thiếu thì thay thế bằng ―Unknown

##PHẦN 2: KHAI THÁC THÔNG TIN HỮU ÍCH – EDA
1. Trực quan thông tin tương quan tỉ lệ sống sót và thiệt mạng (Survived) trên từng nhóm giới tính (Sex).
2. Trực quan thông tin hành khách sống sót (Survived) trên từng nhóm phân loại hành khách (Pclass).
3. Trực quan thông tin hành khách sống sót trên từng nhóm giới tính và thang đo tuổi tác (Agegroup)
4. Trực quan xác suất hành khách sống sót dựa trên thông tin nhóm (familySize)đi cùng
5. Trực quan xác suất hành khách sống sót dựa trên thông tin giá vé (Fare)
6. Trực quan số lượng người thiệt mạng và sống sót theo phân lớp (Pclass) hành khách và cảng sẽ cập bến (Embarked).

# BÀI LÀM

##PHẦN 1: DATA CLEANSING & FEATURE ENGINEERING

1. Viết hàm load_data() để tải dữ liệu lên ứng dụng.Sau đó, hiển thị ra màn hình 10 dòng đầu tiên.
2. Thống kê dữ liệu thiếu trên các biến số và trực quan hóa dữ liệu thiếu bằng biểu đồ (Heat map). Hãy cho nhận xét về tình trạng thiếu dữ liệu Age, Cabin và Embarked
3. Xử lý tên cột tên Name, tách ra làm 2 cột: firstName và secondName.
**Lưu ý:** Sau khi tách cột xong thì xóa luôn cột Name

4. Xứ lý rút gọn kích thước dữ liệu trên cột Sex như sau: thay thế male  M và female  F
5. Xử lý dữ liệu thiếu trên biến Age bằng cách thay thế bằng giá trị trung bình tuổi: Hãy đưa ra quyết định dùng giá trị trung bình tuổi toàn bộ hành khách hay theo từng nhóm hạng vé (hạng hành khách: Pclass). Ta tiến hành làm các bước sau
- Sử dụng Seaborn để vẽ biểu đồ (Box plot) trực quan dữ liệu để xác định phân phối tuổi trên từng hạng hành khách. Nhận xét về tuổi trung bình giữa các nhóm hành khách. Từ đó đưa ra quyết định cách thay thế giá trị tuổi bị thiếu.
- Tiến hành thay thế giá trị Age bị thiếu, hiển thị kết quả dạng bảng và trực quan dữ liệu đã xử lý thiếu cho cột‘Age‘ bằng biểu đồ Heat map.
6. Xây dựng biến số Agegroup có thang đo thứ tự được ánh xạ theo thang đo khoảng dựa trên độ tuổi của hành khách như sau: (age =< 12]  Kid; (12, 18]: Teen, (18, 60]: Adult và ( age > 60): Older
7.  Tiến hành thêm đặc trưng về danh xưng (namePrefix) trong xã hội bằng cách tách Mr, Mrs, Miss, Master ra khỏi ―secondName
Khai thác thêm thông tin số lượng thành viên đi theo nhóm thân quen (familySize) đối với mỗi hành khách trên chuyến hải trình; family size = 1+ SibSp + Parch
8. Tạo thêm đặc trưng ‗Alone‘ để xác định hành khách đi theo nhóm hay cá nhân bằng cách dựa trên familySize như sau: Nếu familySize = 0 thì giá trị Alone = 1 và ngược lại là 0.
9. Tiến hành tách loại cabin (typeCabin) mà hành khách ở để lọc và phân tích đặc tính cabin. Loại cabin được kí hiệu bởi chữ cái đầu tiên. Lưu ý: Đối với dữ liệu cabin bị thiếu thì thay thế bằng ―Unknown
"""

#Khai báo các thư viện
import pandas as pd
import sys
import seaborn as sns
import matplotlib.pyplot as plt

"""***1. Viết hàm load_data() để tải dữ liệu lên ứng dụng.Sau đó, hiển thị ra màn hình 10 dòng đầu tiên.***"""

def load_data(filename):
  return pd.read_csv('https://raw.githubusercontent.com/huynhhoc/DataAnalystDeepLearning/main/Data/'+filename)
df = load_data('titanic_disaster.csv')
df.head()

"""***2. Thống kê dữ liệu thiếu trên các biến số và trực quan hóa dữ liệu thiếu bằng biểu đồ (Heat map). Hãy cho nhận xét về tình trạng thiếu dữ liệu Age, Cabin và Embarked***"""

sns.heatmap(df.isna(),
            yticklabels=False,
            cbar=True,
            cmap='viridis')

"""Nhận xét:Tình trạng thiếu dữ liệu Age, Cabin và Embarked
- Embarked: đủ dữ liệu
- Age, Cabin: không đủ dữ liệu(Age < Cabin)

***3. Xử lý tên cột tên Name, tách ra làm 2 cột: firstName và secondName.***
"""

# tách cột Name
df[['firstName', 'secondName']]=df['Name'].str.split(',',expand = True)

df.head(5)

#Xoá cột Name
df = df.drop('Name',axis=1)
df.head(5)

"""***4. Xứ lý rút gọn kích thước dữ liệu trên cột Sex như sau: thay thế male  M và female  F***"""

Sex = df['Sex']
for i in range(len(Sex)):
  if  Sex[i] == 'male':
    df.Sex[i] = 'M'
  if  Sex[i] == 'female':
    df.Sex[i] = 'F'
df.head(5)

"""***5. Xử lý dữ liệu thiếu trên biến Age bằng cách thay thế bằng giá trị trung bình tuổi: Hãy đưa ra quyết định dùng giá trị trung bình tuổi toàn bộ hành khách hay theo từng nhóm hạng vé (hạng hành khách: Pclass).***
- Ta tiến hành làm các bước sau:
"""

#Sử dụng Seaborn để vẽ biểu đồ (Box plot) trực quan dữ liệu để xác định phân phối tuổi (Age) trên từng hạng hành khách (Pclass
sns.boxplot(y='Age', x='Pclass', data = df)

# Nhận xét về tuổi trung bình giữa các nhóm hành khách.
#==> Phân phối tuổi trên hạng Pclass = 1 có dạng chuẩn hơn so với hạng 2 và hạng 3

#Tiến hành thay thế giá trị Age bị thiếu.
# dữ liệu thiếu trên biến Age bằng cách thay thế bằng giá trị trung bình tuổi
df['Age'].fillna(df['Age'].mean(), inplace =True)
#Hiển thị kết quả dạng bảng
df

#Trực quan dữ liệu đã xử lý thiếu cho cột‘Age‘ bằng biểu đồ Heat map.
sns.heatmap(df[['Age']].isna(), cmap = 'Reds', yticklabels= False)

"""***6. Xây dựng biến số Agegroup có thang đo thứ tự được ánh xạ theo thang đo khoảng dựa trên độ tuổi của hành khách như sau: (age =< 12]  Kid; (12, 18]: Teen, (18, 60]: Adult và ( age > 60): Older***"""

for i in df['Age']:
  df.loc[(df['Age'] <=  12), 'Agegroup'] ='Kid'
  df.loc[(df['Age'] > 12) & (df['Age'] <= 18), 'Agegroup'] ='Teen'
  df.loc[(df['Age'] > 18) & (df['Age'] <= 60), 'Agegroup'] ='Adult'
  df.loc[(df['Age'] > 60), 'Agegroup'] ='Older'
df.head(10)

"""***7. Tiến hành thêm đặc trưng về danh xưng (namePrefix) trong xã hội bằng cách tách Mr, Mrs, Miss, Master ra khỏi ―secondName***"""

# tách cột secondName
df[['namePrefix','secondName' ]] =df['secondName'].str.split('. ',1,expand = True)

df.head(5)

"""***8. Khai thác thêm thông tin số lượng thành viên đi theo nhóm thân quen (familySize) đối với mỗi hành khách trên chuyến hải trình; family size = 1+ SibSp + Parch***"""

df['familySize'] = 1+df.SibSp+df.Parch

df.head(5)

"""***9. Tạo thêm đặc trưng ‗Alone‘ để xác định hành khách đi theo nhóm hay cá nhân bằng cách dựa trên familySize như sau: Nếu familySize = 0 thì giá trị Alone = 1 và ngược lại là 0.***"""

for i in df['familySize']:
  df.loc[(df['familySize'] ==  0), 'Alone'] = 1
  df.loc[(df['familySize'] !=  0), 'Alone'] = 0
df.Alone

"""***10. Tiến hành tách loại cabin (typeCabin) mà hành khách ở để lọc và phân tích đặc tính cabin. Loại cabin được kí hiệu bởi chữ cái đầu tiên. Lưu ý: Đối với dữ liệu cabin bị thiếu thì thay thế bằng ―Unknown***"""

df['typeCabin']= None
Cabin= df.Cabin
for i in range(len(Cabin)):
  if pd.isna(df.Cabin[i]) == True:
    df['typeCabin'][i]= '―Unknown'
  else:
    df['typeCabin'][i]= df.Cabin[i][0]

# Hiển thị dữ liệu
df

"""##PHẦN 2: KHAI THÁC THÔNG TIN HỮU ÍCH – EDA
1. Trực quan thông tin tương quan tỉ lệ sống sót và thiệt mạng (Survived) trên từng nhóm giới tính (Sex).
2. Trực quan thông tin hành khách sống sót (Survived) trên từng nhóm phân loại hành khách (Pclass).
3. Trực quan thông tin hành khách sống sót trên từng nhóm giới tính và thang đo tuổi tác (Agegroup)
4. Trực quan xác suất hành khách sống sót dựa trên thông tin nhóm (familySize)đi cùng
5. Trực quan xác suất hành khách sống sót dựa trên thông tin giá vé (Fare)
6. Trực quan số lượng người thiệt mạng và sống sót theo phân lớp (Pclass) hành khách và cảng sẽ cập bến (Embarked).

**1. Trực quan thông tin tương quan tỉ lệ sống sót và thiệt mạng (Survived) trên từng nhóm giới tính (Sex).**
"""

Sur_Sex= df.groupby(['Survived', 'Sex'])[['Survived']].count()
Sur_Sex

unstackSur_Sex = Sur_Sex.unstack()
unstackSur_Sex

# Trực quan thông tin tương quan tỉ lệ
#sống sót và thiệt mạng (Survived) trên từng nhóm giới tính (Sex).
unstackSur_Sex['Survived'].plot.bar()

sns.boxplot(y='Age', x='Survived', data = df)

sns.displot(df, x="Age", col="Survived", kde=True)

sns.catplot(x="Survived", y="Age", kind="swarm",data=df)

"""***2. Trực quan thông tin hành khách sống sót (Survived) trên từng nhóm phân loại hành khách (Pclass).***"""

Sur_Pclass= df.groupby(['Survived', 'Pclass'])[['Survived']].count()
Sur_Pclass

unstackSur_Pclass = Sur_Pclass.unstack()
unstackSur_Pclass

# Trực quan thông tin tương quan tỉ lệ
#sống sót và thiệt mạng (Survived) trên từng nhóm phân loại hành khách (Pclass).
unstackSur_Pclass['Survived'].plot.bar()

sns.boxplot(y='Survived', x='Pclass', data = df)

sns.displot(df, x="Pclass", col="Survived", kde=True)

"""***3. Trực quan thông tin hành khách sống sót trên từng nhóm giới tính và thang đo tuổi tác (Agegroup)***"""

Sur_Sex_Agegroup= df.groupby(['Survived', 'Sex','Agegroup'])[['Survived']].count()
Sur_Sex_Agegroup

unstackSur_Sex_Agegroup = Sur_Sex_Agegroup.unstack()
unstackSur_Sex_Agegroup

unstackSur_Sex_Agegroup['Survived'].plot.bar()

sns.catplot(x="Survived", y="Age", hue='Agegroup', kind="swarm",data=df)

"""***4. Trực quan xác suất hành khách sống sót dựa trên thông tin nhóm (familySize)đi cùng***"""

Sur_familySize= df.groupby(['Survived', 'familySize'])[['Survived']].count()
unstackSur_familySize = Sur_familySize.unstack()
unstackSur_familySize

unstackSur_familySize['Survived'].plot.bar()

sns.boxplot(y='Survived', x='familySize', data = df)

sns.displot(df, x="familySize", col="Survived", kde=True)

sns.catplot(x="Survived", y="familySize", kind="swarm",data=df)

"""*5. Trực quan xác suất hành khách sống sót dựa trên thông tin giá vé (Fare)*"""

Sur_Fare= df.groupby(['Survived', 'Fare'])[['Survived']].count()
unstackSur_Fare = Sur_Fare.unstack()
unstackSur_Fare

sns.boxplot(y='Fare', x='Survived', data = df)

sns.displot(df, x="Fare", col="Survived", kde=True)

sns.catplot(x="Survived", y="Fare", kind="swarm",data=df)

sns.factorplot(x='Fare', col='Survived', data=df)

"""***6. Trực quan số lượng người thiệt mạng và sống sót theo phân lớp (Pclass) hành khách và cảng sẽ cập bến (Embarked).***"""

Sur_Pclass_Embarked= df.groupby(['Survived', 'Embarked','Pclass'])[['Survived']].count()
unstackSur_Pclass_Embarked = Sur_Pclass_Embarked.unstack()
unstackSur_Pclass_Embarked

unstackSur_Pclass_Embarked['Survived'].plot.barh()

sns.catplot(x="Embarked", y="Pclass", hue='Survived', kind="swarm",data=df)

sns.factorplot(x='Pclass', y='Survived', col='Embarked', data=df)